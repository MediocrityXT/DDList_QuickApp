<import name="ddl-item" src="./ddl-item.ux"></import>
<import name="ddl-item-2" src="./ddl-item-2.ux"></import>
<import name="quickAddBox" src="./quickAddBox.ux"></import>
<import name="detailBox" src="./detailBox.ux"></import>
<template>
  <div class="page">
    <!--此处应有一个上拉页显示DoneDDL,按DoneTime往上显示-->
    <div class="unfinishedList" show="{{!showFinished}}">
        <list class="page-main">
        <block for="{{listData}}">
          <list-item class="{{indexAdd === $idx ? 'addingAnime' : ''}}" type="ddl"><!--本行class是说新增的item要有个动画-->
            <ddl-item ddl="{{$item.ddl}}" idx="{{$idx}}"></ddl-item>
          </list-item>
        </block>
      </list>
    </div>
    <div class="finishedList" show="{{showFinished}}">
        <list class="page-main">
        <block for="{{finishedList}}">
          <list-item class="" type="ddl">
            <ddl-item-2 ddl="{{$item.ddl}}" idx="{{$idx}}"></ddl-item-2>
          </list-item>
        </block>
      </list>
    </div>
    <!-- 蒙版层以及之上的box -->
    <div class="modal" @click="quitModal" show="{{showModal}}"></div>
    <div>
      <quickAddBox></quickAddBox>
    </div>
    <div>
      <detailBox></detailBox>
    </div>
    <!-- 底栏 ,统计变量还没写 -->
    <div class="bottomMenu">
      <text class="ListLength1" @click="listSwitch(0)">Unfinished: {{listData.length}}</text>
      <div class="addButtonImg" @click="popQuickAddBox" show="{{!showModal}}"></div>
      <text class="ListLength2" @click="listSwitch(1)">Finished: {{finishedList.length}}</text>
    </div>
  </div>
</template>

<style lang="less">
  /* 页面样式 */
  .page {
    flex-direction: column;
    .page-main{
      width: 100%;
      height: 90%;
    }
  }
  .modal {
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: #000000;
    opacity: 0.5;
    top: 0;
    left:0;
  }
  .bottomMenu {
    position: fixed;
    bottom:0;
    left:0;
    right:0;
    
    height:10%;
    width: 100%;
    flex-direction: row;
    flex-grow: 1;
    justify-content: center;
    align-items: center;
    
    .addButtonImg {
      height: 80px;
      width: 80px;
      align-self: center;
      background-image: url('/common/plus.png');
    }
    .ListLength1{
      padding-right:50px;
      align-self: center;

    }
    .ListLength2{
      padding-left:50px;
      align-self: center;

    }
  }
</style>

<script>
import prompt from '@system.prompt'  //系统的弹出提醒
import storage from '@system.storage'
import vibrator from '@system.vibrator'

export default {
  private: {
    // 展示列表,由未完成DDL数据组成,按deadline排序了
    listData: [
      // {ddl:{
      //   content:"点击DDL的文字显示具体信息先设置上面的几项基本元素",
      //   deadline:{date:"2021-07-25",time:"10:00"},
      //   timeScale: 'day',
      //   Priority:"casual",
      //   StartTime:"None",
      //   repeatRule:"None",
      //   Progress:"0",  
      //   Order:"1",
      //   DoneTime:''
      // }},
      // {ddl:{
      //   content:"debugApp",
      //   deadline:{date:"2021-07-22",time:"01:00"},
      //   timeScale: 'day',
      //   Priority:"vital",
      //   StartTime:"None",
      //   repeatRule:"None",
      //   Progress:"0",  
      //   Order:"2",
      //   DoneTime:''
      // }},
      // {ddl:{
      //   content:"test",
      //   deadline:{date:"2021-07-30",time:"11:00"},
      //   timeScale: 'month',
      //   Priority:"important",
      //   StartTime:"None",
      //   repeatRule:"None",
      //   Progress:"0",  
      //   Order:"2",
      //   DoneTime:''
      // }},
    ],
    finishedList: [],
   
    // 最近增加的记录的index
    indexAdd: 0,
    //本地记录蒙版显示状态
    showModal: false,
    showQuickAddBox: false,
    showDetailBox: false,
    showFinished: false
  },
  //开始侦听子组件触发的事件
  onInit () {
    //读取已有数据到listData和finishedList
    this.getList()

    //排序
    this.sortUnfinished()
    this.sortFinished()
    //当ddl较近时震动
    this.$on('nearDDL', (evt)=>{
      this.showHint("Deadlines are near!")
      vibrator.vibrate({
        mode: 'long'
      })
    });
    //quickAddBox新建DDL的回调
    this.$on('sendNewDDL', (evt)=>{
      this.quitModal();
      this.addNewDDL(evt);
      this.sortUnfinished()
    });
    this.$on('setDetailsOfNewDDL', (evt)=>{
      this.quitModal(); //退出
      this.addNewDDL(evt); //已填数据写入
      this.popDetailBox(this.listData.length-1,1) //list刚push进去的最后一个
      //此处不排序,detailBox的edit事件之后排序
    });
    
    //detailBox发来的edit事件,只在unfinished部分有
    this.$on('editDDL', (evt) => {
      const idx = evt.detail.idx
      this.listData[idx].ddl = evt.detail.ddl

      console.log(this.listData)
      this.sortUnfinished()
      console.log(this.listData)
    })
    //ddl Item发来的显示DetailBox申请
    this.$on('callDetails', (evt) => {
      this.popDetailBox(evt.detail.idx,evt.detail.type)
    })
    //ddl Item发来的标记完成事件,只在unfinished部分有
    this.$on('doneDDL', (evt) => {
      const idx = evt.detail.idx
      console.log("done the ddl ",idx)
      this.listData[idx].ddl.DoneTime = {date: this.$app.$def.getDate(),time:this.$app.$def.getTime()}
      this.finishedList.push(this.listData[idx])
      this.sortFinished()
      this.listData.splice(idx,1)
    })
    //ddl Item发来的删除事件
    this.$on('removeDDL', (evt) => {
      const type = evt.detail.type
      const idx = evt.detail.idx
      this.$broadcast("hideRow",{})
      if(type==1){
        this.listData.splice(idx,1)
      }else if(type==2){
        this.finishedList.splice(idx,1)
      }else{
        console.log("remove error")
      }
    })
  },
  onDestroy() {
    //存储已有的listData和finishedList
    this.storeList()
  },
  listSwitch(showFinished){
    if(showFinished==0){
      this.showFinished = false
    }else{
      this.showFinished = true
    }
  },
  popQuickAddBox(){
    this.showModal = true
    this.showQuickAddBox = true
    this.$broadcast('quickAddBox',{showQuickAddBox:true})
  },
  popDetailBox(idx,type){
    this.showModal = true
    this.showDetailBox = true
    console.log("type:",type)
    if(type==1){
      var ddl = this.listData[idx].ddl
    }else if(type==2){
      var ddl = this.finishedList[idx].ddl
    }
    this.$broadcast('detailBox',{showDetailBox:true,type:type,idx:idx,ddl:ddl})  
  },
  quitModal(){
    //关闭正在显示的box
    this.showModal = false
    if(this.showQuickAddBox){
      this.showQuickAddBox= false,
      this.$broadcast('quickAddBox',{showQuickAddBox:false})
    }else if(this.showDetailBox){
      //关掉显示,发送detailBox到子组件,子组件发出editDDL
      this.showDetailBox= false,
      this.$broadcast('detailBox',{
        showDetailBox:false,
        //只需要box关闭的参数,下面的参数置空
        type:'',
        idx:'',
        ddl:{}
      })
    }
  },
  addNewDDL(evt){
    console.log(evt.type);
    const params = evt.detail;
    this.indexAdd = this.listData.length
    //默认待办时间StartTime从此刻开始
    var startTime ={
      date: this.$app.$def.getDate(),
      time: this.$app.$def.getTime()
    }
    console.log("add ddl:",params.deadline)
    this.listData.push({
      ddl:{
        content:params.content,
        deadline:params.deadline,
        timeScale:params.timeScale,
        Priority:"normal",
        StartTime:startTime,
        repeatRule:"None",
        Progress:"0",  
        Order:'',
        DoneTime:{},
      }
    })
  },
  //对listData进行排序
  sortUnfinished(){
    this.listData.sort((a,b) => {
      return this.$app.$def.AisBefore(a,b)
    })
  },
  //对finishedList进行排序
  sortFinished(){
    this.finishedList.sort((a,b) => {
      //反序 越晚的越前
      return this.$app.$def.AisBefore(b,a)
    })
  },
  getList(){
    storage.get({
      key:"data1",
      success: (data)=>{
        console.log("get data1",data)
        if(data!=''){
          console.log("parse data1",JSON.parse(data))
          this.listData = JSON.parse(data)
        }else{
          console.log("empty data1")
        }
      },
      fail: function(data, code) {
        console.log(`data1 fail, code = ${code}`)
      }
    })
    storage.get({
      key:"data2",
      //箭头函数才能用this
      success: (data)=>{
        console.log("get data2",data)
        if(data!=''){
          console.log("parse data2",JSON.parse(data))
          this.finishedList = JSON.parse(data)
        }else{
          console.log("empty data2")
        }
      },
      fail: function(data, code) {
        console.log(`data2 fail, code = ${code}`)
      }
    })
  },
  storeList(){
    var data1 = JSON.stringify(this.listData)
    console.log("data1",data1)
    var data2 = JSON.stringify(this.finishedList)
    storage.set({
      key: "data1",
      value: data1,
      success: function(data) {
        console.log('storing data1 success')
      },
      fail: function(data, code) {
        console.log(`data1 fail to Store, code = ${code}`)
      }
    })
    storage.set({
      key: "data2",
      value: data2,
      success: function(data) {
        console.log('storing data2 success')
      },
      fail: function(data, code) {
        console.log(`data2 fail to Store, code = ${code}`)
      }
    })
  },
  
  /**
   * 信息提示
   */
  showHint (msg) {
    prompt.showToast({ message: msg })
  }
}
</script>